{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/abhra/Downloads/zola-main/zola-main/app/lib/supabase/server.ts"],"sourcesContent":["import { Database } from \"@/app/types/database.types\"\nimport { createServerClient } from \"@supabase/ssr\"\nimport { cookies } from \"next/headers\"\n\nexport const createClient = async () => {\n  const cookieStore = await cookies()\n\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll: () => cookieStore.getAll(),\n        setAll: (cookiesToSet) => {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) => {\n              cookieStore.set(name, value, options)\n            })\n          } catch {\n            // ignore for middleware\n          }\n        },\n      },\n    }\n  )\n}\n"],"names":[],"mappings":";;;AACA;AAAA;AACA;;;AAEO,MAAM,eAAe;IAC1B,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,QAAQ,IAAM,YAAY,MAAM;YAChC,QAAQ,CAAC;gBACP,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;wBAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;oBAC/B;gBACF,EAAE,OAAM;gBACN,wBAAwB;gBAC1B;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/abhra/Downloads/zola-main/zola-main/app/api/update-chat-model/route.ts"],"sourcesContent":["import { createClient } from \"@/app/lib/supabase/server\"\n\nexport async function POST(request: Request) {\n  try {\n    const supabase = await createClient()\n    const { chatId, model } = await request.json()\n\n    if (!chatId || !model) {\n      return new Response(\n        JSON.stringify({ error: \"Missing chatId or model\" }),\n        {\n          status: 400,\n        }\n      )\n    }\n\n    // Update the chat record with the new model\n    const { error } = await supabase\n      .from(\"chats\")\n      .update({ model })\n      .eq(\"id\", chatId)\n\n    if (error) {\n      console.error(\"Error updating chat model:\", error)\n      return new Response(\n        JSON.stringify({\n          error: \"Failed to update chat model\",\n          details: error.message,\n        }),\n        { status: 500 }\n      )\n    }\n\n    return new Response(JSON.stringify({ success: true }), {\n      status: 200,\n    })\n  } catch (err: any) {\n    console.error(\"Error in update-chat-model endpoint:\", err)\n    return new Response(\n      JSON.stringify({ error: err.message || \"Internal server error\" }),\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,WAAW,MAAM,CAAA,GAAA,kIAAA,CAAA,eAAY,AAAD;QAClC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE5C,IAAI,CAAC,UAAU,CAAC,OAAO;YACrB,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,OAAO;YAA0B,IAClD;gBACE,QAAQ;YACV;QAEJ;QAEA,4CAA4C;QAC5C,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,SACL,MAAM,CAAC;YAAE;QAAM,GACf,EAAE,CAAC,MAAM;QAEZ,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,OAAO;gBACP,SAAS,MAAM,OAAO;YACxB,IACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;QAAK,IAAI;YACrD,QAAQ;QACV;IACF,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO,IAAI,OAAO,IAAI;QAAwB,IAC/D;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}